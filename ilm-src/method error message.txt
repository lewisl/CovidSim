Revise.errors()
┌ Error: Failed to revise /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl
│   exception =
│    KeyError: key Tuple{typeof(spread!),Any,Any,Any,Any} not found
│    Stacktrace:
│     [1] getindex at ./iddict.jl:92 [inlined]
│     [2] (::Revise.var"#72#73"{OrderedCollections.OrderedDict{Revise.RelocatableExpr,Union{Nothing, Array{Any,1}}},OrderedCollections.OrderedDict{Revise.RelocatableExpr,Union{Nothing, Array{Any,1}}},Module,Array{Pair{Module,String},1}})() at /Users/lewis/.julia/packages/Revise/BqeJF/src/Revise.jl:465
└ @ Revise ~/.julia/packages/Revise/BqeJF/src/Revise.jl:760
┌ Warning: Due to a previously reported error, the running code does not match saved version for the following files:
│
│   /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl
│
│ Use Revise.errors() to report errors again.
└ @ Revise ~/.julia/packages/Revise/BqeJF/src/Revise.jl:820
┌ Error: Failed to revise /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl
│   exception =
│    KeyError: key Tuple{typeof(spread!),Any,Any,Any,Any} not found
│    Stacktrace:
│     [1] getindex at ./iddict.jl:92 [inlined]
│     [2] (::Revise.var"#72#73"{OrderedCollections.OrderedDict{Revise.RelocatableExpr,Union{Nothing, Array{Any,1}}},OrderedCollections.OrderedDict{Revise.RelocatableExpr,Union{Nothing, Array{Any,1}}},Module,Array{Pair{Module,String},1}})() at /Users/lewis/.julia/packages/Revise/BqeJF/src/Revise.jl:465
└ @ Revise ~/.julia/packages/Revise/BqeJF/src/Revise.jl:760




# 3 methods for generic function "spread!":
[1] spread!(dat, locale, env) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:21
[2] spread!(dat, locale, spreadcases, env) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:35
[3] spread!(dat, locale, spreadcases, env, density_factor) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:35


Really, there should be 4 methods:

This signature should result in 2 methods: function spread!(dat, locale, env, density_factor = 1.0)

This signature should result in 2 methods: function spread!(dat, locale, spreadcases, env, density_factor = 1.0)

Julia is mangling the 2nd method of the first signature when density_factor IS supplied and confusing it with the first method of the second signature when density_factor is NOT supplied. It is like Julia is counting arguments and ignoring their types.

Then I typed some of the arguments for each signature:, 



Julia then got the methods straight:

julia> methods(spread!)
 # 4 methods for generic function "spread!":
[1] spread!(dat, locale::Int64, spreadcases::Array{Spreadcase,1}, env) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:35
[2] spread!(dat, locale::Int64, spreadcases::Array{Spreadcase,1}, env, density_factor::Float64) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:35
[3] spread!(dat, locale::Int64, env) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:21
[4] spread!(dat, locale::Int64, env, density_factor::Float64) in CovidSim_ilm at /Users/lewis/.julia-local-packages/CovidSim_ilm/spread.jl:21

This does not seem like a problem with method dispatch; seems like a problem with type inference.